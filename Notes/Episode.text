igniting your app
NPM NPMjs.com package manager 
bundle 
npm init (-y ignore few thing )
package json -- configuration  of project 

bundler--> webpack,vite,parcel 

npm install -D parcel 
  two type of package and dependencies 
     dev dependencies only used for dev
     prod or normal 
     
     ------------------------
     ~ install major version 
     ^ to install new or latest  version 

     package-lock.json
      track the exact version
      log the version 
      integrity  hash all 
      node module -- all dependencies code 
      ------------------
      transitive dependencies dependencies depend on other packages 
      -----------------------------
      babel 
      browser-List

      npx parcel index.html
      npm install the package
      npx execute the package

      cdn is not preferred way to add react 

      ---------------
  # parcel
    -Dev build 
    -local server
    -file watching algorithm - written in c++
    -caching -faster build
    -image optimization 
    -minification
    -bundling 
    -file compressing
    -Tree Shaking- remove unused code
    -Different dev and prod

    https://parceljs.org/

    remove cash parcel
    -Remove-Item -Recurse -Force .parcel-cache

    prod build 
    npx parcel build index.html
    get error for that remove main from package,json

    browser list 
    https://browserslist.dev/?q=bGFzdCAyIHZlcnNpb25z

    hhmr


Episode 3
    ----------------------------------------------------------------------
    npm run start=npm start

    JSX
    is not HTML in JSX
    JSX is HTML like syntax looks like HTML
    parcel =>babel transpile before it reaches the js- babel
    ##babel is package is covert the code 
        -js compiler 
        -JSX => React.createElement =>HTMLElement(render)
        -https://babeljs.io/
        -Attribute in JSX is always camelCase 
        -single we can write without round bracket 
        -multiple line should in round like 

 React extension 
 -Prettier - Code formatter
 -Bracket Pair Colorization Toggler
 - Better Comments


 -React component 
  - two type
    -Class based component - old 
    -Functional based component- new  
  
   React Functional component 
     name start with capital later 
     function return JSX
     to render the component <component/>
     component composition -- one component into other component
     write normal function or arrow function for component 
     in JSX inside {} run any js code 
     write react element directly in JSX and react element in {}
     write component inside the react element like <component/>

     cross side scripting attack-- read local storage, get cookies 
     JSX take care cross side scripting attack it will sanitize the data before rendering 
     call component as function inside the {component()}

Episode 04
---------------------------------------------------
Food ordering app
 How to build such app?
  1 planning--> should know what is build   
  Name   
component 
    Header
       -logo
       -Nave Item
    Body
        -search 
        -card container 
           restaurant card 
             -image
             -Name of Res, Star Rating,cuisines, delivery time 
     footer 
        copyright 
        links 
        address 
        contact

        https://tailwindcss.com/ css 

property (props)  -m just pass argument to the function 
config driven UI- driven by data 
make sure add key attribute when you loop element
should not use key as index 
not using keys (not acceptable ) us index as key Better than not use 
https://robinpokorny.com/blog/index-as-a-key-is-an-anti-pattern/  


Episode-05 part-01
------------------------------------------------
React make developer life easy 
React hooke
best practice make separate file for each component 
folder structure for React
https://legacy.reactjs.org/docs/faq-structure.html
  No recommend way it is dependant on your project or industries standard

  file name of component
  js or jsx or tsx we can write any extension

  export 
  before we can import export the function
  export default Header;
  import with file name extension or without extension  
  import Header from "./component/Header"

  two type export 
    named export multiple export ==> imported in {}  //import { CDN_URL } from "../utils/constants"
    default export/import ==> export default =>import Component from "path"

    we can't export multiple times the we can use name export 
    eg constant file 

    Can we do tow type of export?
      using both named and default exports in the same file can be considered an anti-pattern.
      It can lead to confusion and make the code harder to understand. 
      It's generally recommended to use either named exports or default exports in a single file, but not both
    

    keep hardcoded data in separate file 
    util or common 
    write const variable capital letter in snakeed 


    part 02
    ---------------------------------
   React hook 
   - normal js utility function it prebuilt utility given by rect
   - need to import that
   two most important hook
     -useState() -super powerful state variable 
     -useEffect()
     whenever state variable update react will re render the component

     Reconciliation algorithm (React Fiber)
     virtual Dom - not actual Dom
     actual dom <div> HTML tag
     virtual is representation actual dom => js Object react element

     Dif algorithm =>
     find diff 
     react 16 new algorithm to update the dom react fiber(new algorithm) 
     finding dif in the dom and update

     React Fiber Architecture=> https://github.com/acdlite/react-fiber-architecture
     
     doing efficient dom manipulation using virtual dom
     diff algorithms very efficient
     Reconciliation
     react constantly monitor state variable 

Episode 06
--------------------------------------------
Monolith Architecture-- all module in same project
Microservice Architecture= Diff service for diff feature 
        -- separation project 
        --single responsibly 
  how to infract with each other ?

  two way to call API
   page load ==> make API call(500 time) =-> wait and render the UI
   page load ===> render the UI==>make API call ==> get result and render the data 
       better approach load page first 
       react render cycle is very fast 

       hook 
       useEffect
       fetch ===>is given by browser 
       cross origin issue  ==> browser blocked
       conditional rendering => render the component based on diff conditional

       why we use useState the state variable?
       whenever state variable update triggers a Reconciliation cycle (render the whole component)
         finding the diff between virtual dom and new virtual dom and update the dom
    