igniting your app
NPM NPMjs.com package manager 
bundle 
npm init (-y ignore few thing )
package json -- configuration  of project 

bundler--> webpack,vite,parcel 

npm install -D parcel 
  two type of package and dependencies 
     dev dependencies only used for dev
     prod or normal 
     
     ------------------------
     ~ install major version 
     ^ to install new or latest  version 

     package-lock.json
      track the exact version
      log the version 
      integrity  hash all 
      node module -- all dependencies code 
      ------------------
      transitive dependencies dependencies depend on other packages 
      -----------------------------
      babel 
      browser-List

      npx parcel index.html
      npm install the package
      npx execute the package

      cdn is not preferred way to add react 

      ---------------
  # parcel
    -Dev build 
    -local server
    -file watching algorithm - written in c++
    -caching -faster build
    -image optimization 
    -minification
    -bundling 
    -file compressing
    -Tree Shaking- remove unused code
    -Different dev and prod

    https://parceljs.org/

    remove cash parcel
    -Remove-Item -Recurse -Force .parcel-cache

    prod build 
    npx parcel build index.html
    get error for that remove main from package,json

    browser list 
    https://browserslist.dev/?q=bGFzdCAyIHZlcnNpb25z

    hhmr


Episode 3
    ----------------------------------------------------------------------
    npm run start=npm start

    JSX
    is not HTML in JSX
    JSX is HTML like syntax looks like HTML
    parcel =>babel transpile before it reaches the js- babel
    ##babel is package is covert the code 
        -js compiler 
        -JSX => React.createElement =>HTMLElement(render)
        -https://babeljs.io/
        -Attribute in JSX is always camelCase 
        -single we can write without round bracket 
        -multiple line should in round like 

 React extension 
 -Prettier - Code formatter
 -Bracket Pair Colorization Toggler
 - Better Comments


 -React component 
  - two type
    -Class based component - old 
    -Functional based component- new  
  
   React Functional component 
     name start with capital later 
     function return JSX
     to render the component <component/>
     component composition -- one component into other component
     write normal function or arrow function for component 
     in JSX inside {} run any js code 
     write react element directly in JSX and react element in {}
     write component inside the react element like <component/>

     cross side scripting attack-- read local storage, get cookies 
     JSX take care cross side scripting attack it will sanitize the data before rendering 
     call component as function inside the {component()}

Episode 04
---------------------------------------------------
Food ordering app
 How to build such app?
  1 planning--> should know what is build   
  Name   
component 
    Header
       -logo
       -Nave Item
    Body
        -search 
        -card container 
           restaurant card 
             -image
             -Name of Res, Star Rating,cuisines, delivery time 
     footer 
        copyright 
        links 
        address 
        contact

        https://tailwindcss.com/ css 

property (props)  -m just pass argument to the function 
config driven UI- driven by data 
make sure add key attribute when you loop element
should not use key as index 
not using keys (not acceptable ) us index as key Better than not use 
https://robinpokorny.com/blog/index-as-a-key-is-an-anti-pattern/  


Episode-05 part-01
------------------------------------------------
React make developer life easy 
React hooke
best practice make separate file for each component 
folder structure for React
https://legacy.reactjs.org/docs/faq-structure.html
  No recommend way it is dependant on your project or industries standard

  file name of component
  js or jsx or tsx we can write any extension

  export 
  before we can import export the function
  export default Header;
  import with file name extension or without extension  
  import Header from "./component/Header"

  two type export 
    named export multiple export ==> imported in {}  //import { CDN_URL } from "../utils/constants"
    default export/import ==> export default =>import Component from "path"

    we can't export multiple times the we can use name export 
    eg constant file 

    Can we do tow type of export?
      using both named and default exports in the same file can be considered an anti-pattern.
      It can lead to confusion and make the code harder to understand. 
      It's generally recommended to use either named exports or default exports in a single file, but not both
    

    keep hardcoded data in separate file 
    util or common 
    write const variable capital letter in snakeed 


    part 02
    ---------------------------------
   React hook 
   - normal js utility function it prebuilt utility given by rect
   - need to import that
   two most important hook
     -useState() -super powerful state variable 
     -useEffect()
     whenever state variable update react will re render the component

     Reconciliation algorithm (React Fiber)
     virtual Dom - not actual Dom
     actual dom <div> HTML tag
     virtual is representation actual dom => js Object react element

     Dif algorithm =>
     find diff 
     react 16 new algorithm to update the dom react fiber(new algorithm) 
     finding dif in the dom and update

     React Fiber Architecture=> https://github.com/acdlite/react-fiber-architecture
     
     doing efficient dom manipulation using virtual dom
     diff algorithms very efficient
     Reconciliation
     react constantly monitor state variable 

Episode 06
--------------------------------------------
Monolith Architecture-- all module in same project
Microservice Architecture= Diff service for diff feature 
        -- separation project 
        --single responsibly 
  how to infract with each other ?

  two way to call API
   page load ==> make API call(500 time) =-> wait and render the UI
   page load ===> render the UI==>make API call ==> get result and render the data 
       better approach load page first 
       react render cycle is very fast 

       hook 
       useEffect
       fetch ===>is given by browser 
       cross origin issue  ==> browser blocked
       conditional rendering => render the component based on diff conditional

       why we use useState the state variable?
       whenever state variable update triggers a Reconciliation cycle (render the whole component)
         finding the diff between virtual dom and new virtual dom and update the dom
         

Episode-07
------------------------------------------------
React routing
useEffect 
  if the no dependance array ===>is called every render of the component
  if dependance array is empty ===> is called on initial render and just once 
  if you pass dependency ==> is called on when dependency change  

UseSate
  Never crated useState outside component is used for local variable
  Always declare state variable on top of the component
  Never create useSate inside the if else it created inconsistency in app
  Never create state variable inside the function

  React router 6.4 version 
  https://reactrouter.com/en/main

  Routing  configuration ==> create-router-dom
  createBrowserRouter==>  pass object contain path and element 
  {
    path:""
    element:""
    errorElement :""
  }
  this recommended  router by react document 
   routerProvider  ==> provide the browser Router configuration  
   routerProvider is component is render 
   <RouterProvider router="configuration">
   rafce==> vs code shortcut create component
    Error handler 

   - function started with use is hook 
    useRouteError- it is proved error details 

    children route 
    Outlet component==> filed with children according to the path
     Never use as anchor tag for routing path because it refresh page 
     use Link component => <Link to="path"></Link>
     single page application

     Two type of routing web application
       1 client side => not refresh the only load the component
       2 server side routing => refresh the page req to server and get the page and render on the browser

       Dynamic routing 
       /:id if this then id is consider as dynamic 

       Graph Ql load require data
       veg only
       useParam==>get query params from the url
       useParam==>get query params from the url

       when loop the element key should be for the parent dom element 
       behind the seen link is used anchor tag
        can't use useState in loop 
        can't create useState in function
---------------------------------------------------------
Episode 08
     Class based component
        is old way to create component
        is normal js Class
        Extends form  React.Component
        Component has render function => return JSX 
        constructor receive prop
        should use super(props)
        why we write super() ?

    State variable in class component
    state is create when class create instance 
    create in state variable in constructor
    state is object we can add all state variable 
    use ==> ths.state.property name
    behind seem in functional Component create single variable for all state
    never update state variable directly 
    use this.setState();
    state variable update only passed property


Life Cycle of class base component
https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/
      create instance of class 
      constructor called 
      render called 
      componentDidMount called 

      parent constructor called
      parent render called
      children constructor called
      children render called
      children componentDidMount called
      parent componentDidMount called


     use of componentDidMount ==> make an API calls
  Rect 
// log of app
    parent constructor called 
    About.js:14 parent render called 
    UserClass.js:9 child constructor is called First Child
    UserClass.js:16 child render called First Child
    UserClass.js:9 child constructor is called Second child
    UserClass.js:16 child render called Second child
    UserClass.js:12 child component mount called First Child
    UserClass.js:12 child component mount called Second child
    About.js:11 parent component did mount  called 

    componentDidUpdated==> after dom updated 

    Never compare the react class based component life cycle with function component
    we can use useEffect more time based dependencies that you want pass 
    we need clear thing 
    this shared with all method of class component

    useEffect of function component
      if we return the function inside the useEffect, that functional will call when component 
         unmount and we can doe clean activity inside that function
-------------------------------------------------------------
Episode 09
----------------------------------------------
optimization of code
single responsibly==> 
reusable 
testable  
modularity 
testability 
break down code        
-----------
custom hooks

hooks ==> utility function
can create local storage ans session storage

bundler 
----------
 create single file and minified 
 app chunking 
 Code splitting
 Dynamic bundling 
 Lazy loading
 on demand loading 
 dynamic import 
 lazy is function given by react 
//const Grocery = lazy(() => import("./component/Grocery"))

Suspense => react component for lazy load component

-----------------------------------------------------------------
Episode 10  CSS style 
Sass wring CSS with extra feature, 
scss
This not recommend way
---------------
Style component ways use most of company 
https://styled-components.com/
Material component ==> react component libraries pre built component
bootstrap 
chkra ui  
ant design https://ant.design/
--------------------------
tailwind css
https://tailwindcss.com/docs/guides/parcel
postcssrc  ==> parcel use postcssrc  use to understand tailwind
tailwind configuration => which file apply

importing tailwind css in project through css
parcel include tailwind css which is used in application 

-------------------------------------------------------------
Episode - 11 Data is the New oil
Higher order component-- is function take component return enhance component
     -add extra feature enhance the feature 
     - current swiggy example add label to restaurant as veg
Two type of layer 
  UI(static) layer =>JSX powered by data layer 
  Data Layer => prop, local, variable, state, js code

  React dev tool chrome extension
  https://chromewebstore.google.com/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi
  You will get two new tabs in your Chrome DevTools: "⚛️ Components" and "⚛️ Profiler".
  Profiler".=> colorful component is that we perform the action 
  controlled component ==> if controlled it self 
  uncontrolled component ===> 
  
  lifting state up
  https://react.dev/learn/sharing-state-between-components#lifting-state-up-by-example

  Prop Drilling
  -------------------
      React one way data flow - parent to chili
      https://react.dev/learn/passing-data-deeply-with-context#replace-prop-drilling-with-context
      should avoid props drilling in Different wya 
      
    React context ==> we can access data across the application 
                    example - logged in user ,theme 
     react proved method to create context 
     import { createContext } from "react"
      To use that context  react provide useContext  
      we can crate multiple context    
      class based component we can't use hook  
      for class based component we can use <UserContext.Consumer> and use call back to get the data 

       <UserContext.Consumer>
                    {
                      //call back function react call the function to get the data 
                        ({ loggedInUser }) => <h1 className="font-bold text-lg">{loggedInUser}</h1>
                    }
      </UserContext.Consumer>   

      to change the context use  UserContext.RouterProvider
       need wrap the component into to this to get the data   
       <UserContext.Provider value={{ loggedInUser: userName }}> 
          only update inside the tag only 
       <UserContext.Provider/>

       Data management libraries state management => using context
       Redux => state management libraries is not part of react for huge application